version: '3'

volumes:
  postgres_data: {}
  static_data: {}
  media_data: {}

networks:
  inner_network:
    driver: bridge
  traefik_network:
    external:
      name: traefik_network

services:
  django: &django
    depends_on:
      - postgres
      - redis
    build: ./app/
    volumes:
      # - ./app/:/app/:cached
      - ./app/backups/:/app/backups/
      - static_data:/app/static/
      - media_data:/app/media/
    networks:
      - inner_network
    env_file:
      - .env
    command: ./start
    restart: always

  postgres:
    image: postgres:12
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432
    networks:
      - inner_network
    env_file:
      - .env
    restart: always

  nginx:
    build: ./nginx
    expose:
      - 80
    volumes:
      - static_data:/django/static/
      - media_data:/django/media/
    networks:
      - inner_network
      - traefik_network
    env_file:
      - .env
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.info_nginx_https.rule=Host("$VIRTUAL_HOST")'
      - 'traefik.http.routers.info_nginx_https.tls.certresolver=httpchallenge_0'
      - 'traefik.http.routers.info_nginx_http.rule=Host("$VIRTUAL_HOST")'
      - 'traefik.http.routers.info_nginx_http.middlewares=redirect_middleware'
      - 'traefik.http.middlewares.redirect_middleware.redirectscheme.scheme=https'
    depends_on:
      - django
    command: nginx -g 'daemon off;'
    restart: always

  redis:
    image: redis:6-buster
    networks:
      - inner_network
    restart: always

  celeryworker:
    <<: *django
    command: celery -A core worker -l info

  celerybeat:
    <<: *django
    command: celery -A core beat -l info
